#!/usr/bin/env python
import os
import uuid
import argparse
import ROOT
import logging

from utils import to_str_vec


logging.basicConfig()
log = logging.getLogger(os.path.basename(__file__))
log.setLevel(logging.INFO)

if __name__ == '__main__':
    
    parser = argparse.ArgumentParser()
    parser.add_argument('--verbose', default=False, action='store_true', help='default = %(default)s')
    parser.add_argument('--num-events', default=-1, type=int, help='default = %(default)s')
    parser.add_argument('--run-dir', type=str, default=None, help='default = %(default)s')
    group_driver = parser.add_mutually_exclusive_group()
    group_driver.add_argument('--direct', dest='driver', action='store_const', const='direct', help='Run your jobs locally.')
    group_driver.add_argument('--grid', dest='driver', action='store_const', const='grid', help='Run your jobs on the grid.')
    group_driver.set_defaults(driver='direct')
    args = parser.parse_args()


    ROOT.gROOT.Macro('$ROOTCOREDIR/scripts/load_packages.C')
    # if not ROOT.xAOD.Init().isSuccess():
    #     raise RuntimeError

    # sample_name = 'mc15_13TeV.341225.PowhegPythia8EvtGen_CT10_AZNLOCTEQ6L1_ggH125_tautauIncl.merge.AOD.e4044_s2608_r6765_r6282'
    sample_name = 'mc15_13TeV.341157.PowhegPythia8EvtGen_CT10_AZNLOCTEQ6L1_VBFH125_tautauhh.merge.AOD.e3888_s2608_s2183_r7772_r7676'
    # sample_name = 'mc15_13TeV.361108.PowhegPythia8EvtGen_AZNLOCTEQ6L1_Ztautau.merge.AOD.e3601_s2726_r7772_r7676'
    # sample_name = 'data15_13TeV.00276790.physics_Main.merge.DAOD_HIGG4D3.f620_m1480_p2425'
    if args.driver == 'direct':
        log.info('grab eos samples')
        # Get SampleHandler from EOS
        from eos import get_sample
        sample = get_sample(sample_name)
    elif args.driver == 'grid':
        sample = ROOT.SH.SampleHandler()
        ROOT.SH.scanDQ2(sample, sample_name)

    sample.printContent()
    sample.setMetaString ("nc_tree", "CollectionTree")
        
    preproc = ROOT.EventPreProcessor()
    preproc.SetName('Htt_EventPreProcessor')
    preproc.grl_file = 'HiggsTauTauXaod/share/data15_13TeV.periodAllYear_DetStatus-v65-pro19-01_DQDefects-00-01-02_PHYS_StandardGRL_All_Good.xml'
    preproc.trigger_names = to_str_vec([
            #'HLT_tau35_medium1_tracktwo_tau25_medium1_tracktwo_L1TAU20IM_2TAU12IM',
            'HLT_tau35_medium1_tracktwo_tau25_medium1_tracktwo'])

    truth_sel = ROOT.TruthTausSelector()
    truth_sel.SetName('Htt_TruthTausSelector')

    elec_sel = ROOT.ElectronSelector()
    elec_sel.SetName('Htt_ElectronSelector')

    muon_sel = ROOT.MuonSelector()
    muon_sel.SetName('Htt_MuonSelector')


    tau_calib = ROOT.TauCalibrator()
    tau_calib.SetName('Htt_TauCalibrator')

    tau_sel = ROOT.TauSelector()
    tau_sel.SetName('Htt_TauSelector')
    tau_sel.trigger_name = 'HLT_tau35_medium1_tracktwo_tau25_medium1_tracktwo_L1TAU20IM_2TAU12IM'
    tau_sel.tau_conf_name = 'HiggsTauTauXaod/share/tau_selection.conf'

    jet_calib = ROOT.JetCalibrator()
    jet_calib.SetName('Htt_JetCalibrator')

    jet_sel = ROOT.JetSelector()
    jet_sel.SetName('Htt_JetSelector')


    met_calc = ROOT.MetCalculator()
    met_calc.SetName('Htt_MetCalculator')

    main_sel = ROOT.HadHadSelector()
    main_sel.SetName('Htt_HadHadSelector')
    main_sel.trigger_names = to_str_vec([
            #'HLT_tau35_medium1_tracktwo_tau25_medium1_tracktwo_L1TAU20IM_2TAU12IM',
            'HLT_tau35_medium1_tracktwo_tau25_medium1_tracktwo'])
            

    algs = [
        preproc,
        truth_sel,
        elec_sel,
        muon_sel,
        tau_calib,
        tau_sel,
        jet_calib,
        jet_sel,
        met_calc,
        main_sel,
        ]


    if args.verbose:
        # See atlas/Control/AthToolSupport/AsgTools/AsgTools/MsgLevel.h
        for alg in algs:
            alg.setMsgLevel(1) # VERBOSE
    else:
        for alg in algs:
            alg.setMsgLevel(3) # INFO

    # Setup the EventLoop Job
    job = ROOT.EL.Job()
    job.sampleHandler(sample)
    for alg in algs:
        log.info('add {0}'.format(alg.GetName()))
        job.algsAdd(alg)

    # out = ROOT.EL.OutputStream("outputLabel", "xAOD");
    # out.options().setString(ROOT.EL.OutputStream.optContainerSuffix, "out");
    # job.outputAdd(out);
    # print 'output added'

    # Set the access mode
    job.options().setString(ROOT.EL.Job.optXaodAccessMode, ROOT.EL.Job.optXaodAccessMode_athena)

    if args.num_events > 0:
      job.options().setDouble(ROOT.EL.Job.optMaxEvents, args.num_events)

    # define the run dir
    if args.run_dir == None:
        run_dir = 'run_' + uuid.uuid4().hex
    else:
        run_dir = args.run_dir
        
    # run, run, run!
    if args.driver == 'direct':
        driver = ROOT.EL.DirectDriver()
        driver.submit(job, run_dir)

    elif args.driver == 'grid':
        driver = ROOT.EL.PrunDriver()
        driver.options().setString("nc_outputSampleName", "group.phys-higgs.acceptance_tdr_v4")
        job.options().setDouble("nc_official", 1);
        job.options().setString("nc_voms", "atlas:/atlas/phys-higgs/Role=production");
        job.options().setDouble("nc_mergeOutput", 1)
        # driver.options().setDouble("nc_nFilesPerJob", 1)
        driver.options().setDouble("nc_showCmd", 1)
        driver.submitOnly(job, run_dir)
